name: 'Run NPM install'
description: 'Workflow to execute npm install script'

inputs:
  debitoor-npm-token:
    description: 'NPM token for @debitoor scoped packages'
    required: true
  sumup-npm-token:
    description: 'NPM token for @sumup scoped packages'
    required: false
  gh-ssh-private-key:
    description: 'SSH private key'
    required: false
  gh-ssh-known-hosts:
    description: 'SSH known hosts'
    required: false
  npm-ci-install:
    description: 'Run npm ci instead of npm i'
    required: false
    default: 'true'
  skip-package-lock-commit:
    description: 'Set to true to skip committing package-lock.json'
    required: false
    default: 'false'
  npm-command-flags:
    description: run npm command with additional flags
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Validate debitoor NPM token
      if: inputs.debitoor-npm-token == ''
      run: |
        echo "::error::debitoor-npm-token is empty. Please set it in Actions and/or Dependabot secrets"
        exit 1
      shell: bash
    - uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
      with:
        ref: ${{ github.head_ref }}
        ssh-key: ${{ inputs.gh-ssh-private-key }}
    - id: determine-node-npm-version
      run: |
        # tr-d '<=>' to trim '>=8.19.x' to '8.19.x' to prevent major version bumps (like npm@9.3.0 installed by npm i npm@>=8.19.x)
        NODE_VERSION=$(jq -r '.engines.node' ./package.json | tr -d '<=>')
        echo "node-version=${NODE_VERSION/null/16}" >> $GITHUB_OUTPUT
        NPM_VERSION=$(jq -r '.engines.npm' ./package.json | tr -d '<=>')
        echo "npm-version=${NPM_VERSION/null/}" >> $GITHUB_OUTPUT
        NPM_POSTINSTALL=$(jq -r '.scripts.postinstall' ./package.json)
        echo "npm-postinstall=${NPM_POSTINSTALL/null/}" >> $GITHUB_OUTPUT
      shell: bash
    - name: Use Node.js
      uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
      with:
        node-version: ${{ steps.determine-node-npm-version.outputs.node-version }}
        # cache: 'npm' # This throws errors when package-lock.json is not in repo - use manual setup below until package-lock.json will be used everywhere
    - uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      id: cache-node-modules
      with:
        path: |
          ~/.npm
          node_modules
          !node_modules/**/node_modules
          **/node_modules
          ~/.cache/Cypress
          .cache/puppeteer
        key: ${{ runner.os }}-modules-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-modules-${{ hashFiles('**/package.json') }}
          ${{ runner.os }}-modules-
    - name: Update NPM
      if: steps.determine-node-npm-version.outputs.npm-version != ''
      run: npm i npm@${{ steps.determine-node-npm-version.outputs.npm-version }} -g
      shell: bash

    # Configure credentials
    - name: Configure Debitoor token
      env:
        debitoor_npm_token: ${{ inputs.debitoor-npm-token }}
      run: echo "//registry.npmjs.org/:_authToken=${debitoor_npm_token}" > .npmrc
      shell: bash
    - name: Configure SumUp token
      if: inputs.sumup-npm-token != ''
      env:
        sumup_npm_token: ${{ inputs.sumup-npm-token }}
      run: |
        echo "@sumup:registry=https://npm.pkg.github.com" >> .npmrc
        echo "//npm.pkg.github.com/:_authToken=${sumup_npm_token}" >> .npmrc
      shell: bash
    - name: Install SSH Key
      if: inputs.gh-ssh-private-key != ''
      uses: shimataro/ssh-key-action@d4fffb50872869abe2d9a9098a6d9c5aa7d16be4 # v2.7.0
      with:
        key: ${{ inputs.gh-ssh-private-key }} 
        known_hosts: ${{ inputs.gh-ssh-known-hosts }}

    # Updates by Bob should always run `npm install`
    - name: NPM Install
      if: (github.actor == 'bobhammer' || inputs.npm-ci-install == 'false') && steps.cache-node-modules.outputs.cache-hit != 'true'
      run: npm install ${{ inputs.npm-command-flags }}
      shell: bash
    # Updates from other users should run `npm ci` unless `npm-ci-install` has been set to false
    - name: NPM CI
      if: github.actor != 'bobhammer' && inputs.npm-ci-install == 'true' && steps.cache-node-modules.outputs.cache-hit != 'true'
      run: npm ci ${{ inputs.npm-command-flags }}
      shell: bash
    - name: Print debug logs
      if: ${{ failure() }}
      run: cat ~/.npm/_logs/*
      shell: bash

    # `npm ci` fails if package-lock.json file had been not committed after updating package.json
    # This step looks for such error in logs from `npm ci` so later we can add a comment regarding this to PR
    - name: Check outdated lockfile
      id: outdated-lockfile
      if: ${{ failure() }}
      run: echo "outdated-lockfile=$(grep 'Please update your lock file with' ~/.npm/_logs/*debug*.log | wc -l)" >> $GITHUB_OUTPUT
      shell: bash

    - name: NPM postinstall script
      if: steps.determine-node-npm-version.outputs.npm-postinstall != '' && steps.cache-node-modules.outputs.cache-hit == 'true'
      run: npm run postinstall
      shell: bash

    # Update package-lock.json after `npm install`
    - name: Check if package-lock.json has updates
      id: package-lock-status
      run: echo "package-changed=$(git status | grep package-lock.json | wc -l)" >> $GITHUB_OUTPUT
      shell: bash

    # Commit package-lock.json if it has been updated (only for Bob's PRs) AND SSH key was provided (so PR checks can be triggered again)
    - if: ${{ steps.package-lock-status.outputs.package-changed == '1' && inputs.gh-ssh-private-key != '' && github.ref_protected != true && github.actor == 'bobhammer' }}
      uses: stefanzweifel/git-auto-commit-action@8621497c8c39c72f3e2a999a26b4ca1b5058a842 # v5.0.1
      with:
        commit_message: Updated package-lock.json
        file_pattern: "package-lock.json"
        disable_globbing: true

    # Comment regarding updated lockfile when SSH key is not provided
    - if: ${{ steps.package-lock-status.outputs.package-changed == '1' && inputs.gh-ssh-private-key == '' && github.ref_protected != true && github.actor == 'bobhammer' }}
      name: Comment updated package-lock.json
      uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v.4.0.0
      with:
        issue-number: ${{ github.event.number }}
        body: |
          `package-lock.json` has been updated in recent CI workflow run, but cannot be committed because of missing SSH key.
          Please run `npm install` and commit updated `package-lock.json` file or provide SSH key in CI workflow as `gh-ssh-private-key`.

    # Comment regarding outdated lockfile
    - if: ${{ always() && github.event.number != '' && steps.outdated-lockfile.outputs.outdated-lockfile != '0' && github.actor != 'bobhammer' }}
      name: Comment outdated package-lock.json
      uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v.4.0.0
      with:
        issue-number: ${{ github.event.number }}
        body: |
          `package-lock.json` is not in sync with `package.json`. 
          Please commit updated `package-lock.json` file (otherwise deployment will fail).

    # Comment old NodeJs version
    - if: always()
      id: determine-old-node-version
      name: Determine old NodeJs version
      shell: bash
      env:
        NODE_VERSION: ${{ steps.determine-node-npm-version.outputs.node-version }}
      # remove anything after the first dot from NODE_VERSION and then compare it. 'bc' returns 1 if condition is true
      run: echo outdated-node-version=$(echo "${NODE_VERSION//.*/} < 18" | bc) >> $GITHUB_OUTPUT

    - if: always() && fromJSON(steps.determine-old-node-version.outputs.outdated-node-version)
      name: Comment old NodeJs version
      uses: peter-evans/create-or-update-comment@71345be0265236311c031f5c7866368bd1eff043 # v.4.0.0
      with:
        issue-number: ${{ github.event.number }}
        edit-mode: replace
        body: |
          The node version `${{ steps.determine-node-npm-version.outputs.node-version }}` specified in `package.json` is not supported anymore or close to end of support and should be bumped to `>= 18`. 
          Note: Remember to update node version in Dockerfile too.
