name: 'Update deployment status'
description: 'Workflow to manage Github deployment statuses'

inputs:
  state:
    description: 'Deployment state'
    default: 'pending'
    required: false
  environments:
    default: 'production'
    description: ''
    required: false

runs:
  using: "composite"
  steps:
    - name: Update deployment
      run: |
        for env_name in $(echo "${envs}" | tr ',' '\n')
        do
          echo "${env_name}"
          deployment_id_var=${env_name//-/_}_deployment_id
          if [[ ${!deployment_id_var} != "" ]]
          then
            echo "Updating Deployment ${env_name} --> ${{ inputs.state }}"
            
            gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/deployments/${!deployment_id_var}/statuses \
            -f state=${{ inputs.state }}
          fi
        done
      env:
        GH_TOKEN: ${{ github.token }}
        envs: ${{ inputs.environments }}
      shell: bash

    - name: Create deployment
      run: |
        for env_name in $(echo "${envs}" | tr ',' '\n')
        do
          echo "${env_name}"
          deployment_id_var=${env_name//-/_}_deployment_id
          if [[ ${!deployment_id_var} == "" ]]
          then
            echo "Creating Deployment ${env_name} --> ${{ inputs.state }}"
            PAYLOAD="{\"ref\": \"${{ github.ref }}\",\"environment\": \"${env_name}\", \"required_contexts\": []}"
            
            echo ${deployment_id_var}=$(echo "$PAYLOAD" | gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/deployments \
              --jq ".id" \
              --input -) >> $GITHUB_ENV
          fi
        done
      env:
        GH_TOKEN: ${{ github.token }}
        envs: ${{ inputs.environments }}
      shell: bash
   
